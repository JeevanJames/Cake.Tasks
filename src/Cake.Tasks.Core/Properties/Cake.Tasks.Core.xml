<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cake.Tasks.Core</name>
    </assembly>
    <members>
        <member name="T:Cake.Tasks.Config.EnvConfig">
            <summary>
                Global environment configuration, including CI, directory and version information.
            </summary>
        </member>
        <member name="P:Cake.Tasks.Config.EnvConfig.Configuration">
            <summary>
                Gets or sets the build configuration, such as Debug or Release.
            </summary>
        </member>
        <member name="P:Cake.Tasks.Config.EnvConfig.IsCi">
            <summary>
                Gets or sets a value indicating whether Cake is running in a CI environment.
            </summary>
        </member>
        <member name="P:Cake.Tasks.Config.EnvConfig.Branch">
            <summary>
                Gets or sets the version control branch that this build is running from.
            </summary>
        </member>
        <member name="P:Cake.Tasks.Config.EnvConfig.Ci">
            <summary>
                Gets the configuration for the CI settings.
            </summary>
        </member>
        <member name="P:Cake.Tasks.Config.EnvConfig.Directories">
            <summary>
                Gets the configuration for the location of common directories used during a build.
            </summary>
        </member>
        <member name="P:Cake.Tasks.Config.EnvConfig.Version">
            <summary>
                Gets the configuration for version-related information.
            </summary>
        </member>
        <member name="P:Cake.Tasks.Config.EnvConfig.DirectoryConfig.Working">
            <summary>
                Gets or sets the working directory.
            </summary>
        </member>
        <member name="P:Cake.Tasks.Config.EnvConfig.DirectoryConfig.Artifacts">
            <summary>
                Gets or sets the directory for storing build artifacts.
            </summary>
        </member>
        <member name="P:Cake.Tasks.Config.EnvConfig.DirectoryConfig.BinaryOutput">
            <summary>
                Gets or sets the directory for storing binary output from the build process.
            </summary>
        </member>
        <member name="P:Cake.Tasks.Config.EnvConfig.DirectoryConfig.PublishOutput">
            <summary>
                Gets or sets the directory for storing publish output from the build process.
            </summary>
        </member>
        <member name="P:Cake.Tasks.Config.EnvConfig.DirectoryConfig.TestOutput">
            <summary>
                Gets or sets the directory for storing test output from the build process.
            </summary>
        </member>
        <member name="P:Cake.Tasks.Config.EnvConfig.VersionConfig.BuildNumber">
            <summary>
                Gets or sets an unique build number for the build execution.
            </summary>
        </member>
        <member name="P:Cake.Tasks.Config.EnvConfig.VersionConfig.Primary">
            <summary>
                Gets or sets the primary version number for the build. This is in a simple
                {Major}.{Minor}.{Patch} format without prerelease, build or other extra information.
                <para/>
                The value can repeat across multiple builds and is not unique.
            </summary>
        </member>
        <member name="P:Cake.Tasks.Config.EnvConfig.VersionConfig.Full">
            <summary>
                Gets or sets the full semantic version of the build. This includes prerelease, build
                and other extra information.
                <para/>
                The value will be unique for every new commit, but if multiple builds are run for the
                same commit, it will remain the same, so it cannot be considered a unique build value.
            </summary>
        </member>
        <member name="P:Cake.Tasks.Config.EnvConfig.VersionConfig.Build">
            <summary>
                Gets or sets an unique version number for the build.
                <para/>
                The value is unique for every build, regardless of whether a new commit is made or
                the same commit is being rebuilt.
            </summary>
        </member>
        <member name="T:Cake.Tasks.Config.PluginConfig">
            <summary>
                Represents the config object for a Cake.Task plugin.
                <para/>
                Plugins should create a class that derives from this class, if they want to have
                configuration.
            </summary>
            <example><see cref="T:Cake.Tasks.Config.EnvConfig"/>.</example>
        </member>
        <member name="T:Cake.Tasks.Config.Publisher">
            <summary>
                Represents an item that can be published from the current build.
            </summary>
        </member>
        <member name="F:Cake.Tasks.Config.Publisher._properties">
            <summary>
                Additional properties that can be set on the publisher to control the behavior of
                specific tasks.
            </summary>
        </member>
        <member name="F:Cake.Tasks.Config.Publisher._outputSet">
            <summary>
                Indicates whether the output properties - <see cref="P:Cake.Tasks.Config.Publisher.OutputLocation"/> and
                <see cref="P:Cake.Tasks.Config.Publisher.OutputType"/> have been set using the <see cref="M:Cake.Tasks.Config.Publisher.SetOutput(System.String,Cake.Tasks.Config.PublishOutputType)"/> method. This
                is used to ensure that the method is called only once.
            </summary>
        </member>
        <member name="P:Cake.Tasks.Config.Publisher.OutputLocation">
            <summary>
                Gets the directory where the published output is copied to, or the file name of the
                published output, depending on the value of <see cref="P:Cake.Tasks.Config.Publisher.OutputType"/>.
            </summary>
        </member>
        <member name="P:Cake.Tasks.Config.Publisher.OutputType">
            <summary>
                Gets whether the published output is a directory of multiple files or a single file.
            </summary>
        </member>
        <member name="M:Cake.Tasks.Config.TaskConfig.Load``1">
            <summary>
                Loads the subset of configurations for a specific plugin configuration type.
            </summary>
            <typeparam name="T">
                The type of plugin configuration to load the configuration for.
            </typeparam>
            <returns>The <see cref="T:Cake.Tasks.Config.PluginConfig"/> instance for the subset of configurations.</returns>
        </member>
        <member name="P:Cake.Tasks.Core.BaseTaskAttribute.CiSystem">
            <summary>
                Gets or sets the name of the CI system in which this task can be executed (TFS,
                AppVeyor, etc.).
                <para/>
                If not specified, this task will always be executed.
            </summary>
        </member>
        <member name="P:Cake.Tasks.Core.BaseTaskAttribute.ContinueOnError">
            <summary>
                Gets or sets a value indicating whether the task should swallow any exceptions and
                continue running.
            </summary>
        </member>
        <member name="T:Cake.Tasks.Core.ConfigAttribute">
            <summary>
                Marks a method as a configuration task.
            </summary>
        </member>
        <member name="F:Cake.Tasks.Core.ConfigTaskOrder.Priority">
            <summary>
                Priority config tasks should run after all the normal config tasks, but before any CI
                system tasks.
            </summary>
        </member>
        <member name="F:Cake.Tasks.Core.ConfigTaskOrder.CiSystem">
            <summary>
                Config tasks for CI systems should run after all the normal and priority tasks, but
                before any recipe tasks.
            </summary>
        </member>
        <member name="F:Cake.Tasks.Core.ConfigTaskOrder.Recipe">
            <summary>
                Config tasks for recipes should always run last, as they are application-specific.
            </summary>
        </member>
        <member name="P:Cake.Tasks.Core.TaskAttribute.RequiresConfig">
            <summary>
                Gets or sets a value indicating whether to run the config tasks before this task is run.
            </summary>
        </member>
        <member name="P:Cake.Tasks.Core.TaskAttribute.Description">
            <summary>
                Gets or sets the description of this task.
            </summary>
        </member>
        <member name="T:Cake.Tasks.Core.TaskPluginAttribute">
            <summary>
                Registers a class in the assembly that has task plugins.
            </summary>
        </member>
        <member name="M:Cake.Tasks.Core.CoreTasks.SetDirectoryPublisherOutputs(Cake.Core.ICakeContext,Cake.Tasks.Config.TaskConfig)">
            <summary>
                Sets the output details for any <see cref="T:Cake.Tasks.Config.DirectoryPublisher"/> publishers or derived
                publishers. It does this by resolving the final directory path and calling the
                <see cref="M:Cake.Tasks.Config.Publisher.SetOutput(System.String,Cake.Tasks.Config.PublishOutputType)"/> method on the publisher.
            </summary>
            <param name="ctx">The <see cref="T:Cake.Core.ICakeContext"/>.</param>
            <param name="cfg">The <see cref="T:Cake.Tasks.Config.TaskConfig"/>.</param>
        </member>
        <member name="T:Cake.Tasks.Core.TaskConfigException">
            <summary>
                Exception to throw if a task's configuration value is invalid.
            </summary>
        </member>
        <member name="M:Cake.Tasks.Core.TaskConfigException.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Cake.Tasks.Core.TaskConfigException"/> class.
            </summary>
        </member>
        <member name="M:Cake.Tasks.Core.TaskConfigException.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Cake.Tasks.Core.TaskConfigException"/> class with the
                specified <paramref name="message"/>.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Cake.Tasks.Core.TaskConfigException.#ctor(System.String,System.Exception)">
            <summary>
                Initializes a new instance of the <see cref="T:Cake.Tasks.Core.TaskConfigException"/> class with the
                specified <paramref name="message"/> and <paramref name="innerException"/>.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">
                The exception that is the cause of the current exception, or <c>null</c> if no inner
                exception is specified.
            </param>
        </member>
        <member name="M:Cake.Tasks.Core.TaskConfigException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Initializes a new instance of the <see cref="T:Cake.Tasks.Core.TaskConfigException"/> class with serialized data.
            </summary>
            <param name="info">
                The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the
                exception being thrown.
            </param>
            <param name="context">
                The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the
                source or destination.
            </param>
        </member>
    </members>
</doc>
